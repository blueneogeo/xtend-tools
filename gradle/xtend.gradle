// --------- XTEND ------------------------------------------------------------

def xtendSrcDir = file('src/main/java')
def xtendGenTargetDir = file('src/main/xtend-gen')

sourceSets {
  main {
    java {
      srcDir xtendGenTargetDir
    }
  }
}

dependencies {
	compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.4.3'
  	compile 'org.eclipse.xtext:org.eclipse.xtext.xbase.lib:2.4.3'
  	
    // compile "io.vertx:vertx-core:$vertxVersion"
    // compile "io.vertx:vertx-platform:$vertxVersion"  	
}

/*

eclipse {
  project {
    natures 'org.eclipse.xtext.ui.shared.xtextNature'
    buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
  }
}

import org.apache.log4j.BasicConfigurator
import org.eclipse.xtend.core.XtendStandaloneSetup
import org.eclipse.xtend.core.compiler.batch.XtendBatchCompiler
task compileXtend {
  inputs.dir xtendSrcDir
  outputs.dir xtendGenTargetDir

  doLast {
    def srcPath = xtendSrcDir.absolutePath
    def targetPath = xtendGenTargetDir.absolutePath
    def classpath = configurations.compile.asPath

    BasicConfigurator.configure()
    XtendBatchCompiler compiler = new XtendStandaloneSetup().createInjectorAndDoEMFRegistration().getInstance(XtendBatchCompiler.class)
    compiler.setOutputPath(targetPath)
    compiler.setClassPath(classpath)
    // System.out.println(classpath)
    compiler.setSourcePath(srcPath)
    if (!compiler.compile()) {
      throw new GradleException("Xtend compilation failed.");
    }
  }
}

tasks.compileJava.dependsOn compileXtend

buildscript {
  repositories {
    mavenCentral()
    maven {
      url "http://build.eclipse.org/common/xtend/maven/"
    }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  }

  dependencies {
    classpath 'org.eclipse.xtend:org.eclipse.xtend.standalone:2.4.3'
  }
}
*/